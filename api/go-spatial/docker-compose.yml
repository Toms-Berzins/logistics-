version: '3.8'

services:
  # PostGIS Database
  postgis:
    image: postgis/postgis:15-3.4
    container_name: logistics-postgis
    environment:
      POSTGRES_DB: logistics_spatial
      POSTGRES_USER: logistics_user
      POSTGRES_PASSWORD: logistics_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgis_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - logistics_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logistics_user -d logistics_spatial"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: logistics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logistics_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Go Spatial Service
  go-spatial:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics-go-spatial
    environment:
      - PORT=8080
      - DATABASE_URL=postgres://logistics_user:logistics_password@postgis:5432/logistics_spatial?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - JWT_SECRET=your-jwt-secret-key-here
      - PERFORMANCE_TARGET_SPATIAL=50
      - PERFORMANCE_TARGET_ROUTE=200
      - CACHE_TTL=300
    ports:
      - "8080:8080"
    networks:
      - logistics_network
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: logistics-api-gateway
    ports:
      - "8090:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - logistics_network
    depends_on:
      - go-spatial
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: logistics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - logistics_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: logistics-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - logistics_network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  logistics_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgis_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local