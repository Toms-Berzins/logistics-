events {
    worker_connections 1024;
}

http {
    upstream go_spatial {
        server go-spatial:8080;
    }

    upstream node_api {
        server host.docker.internal:3001;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=spatial:10m rate=50r/s;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/plain
        text/css
        text/js
        text/xml
        text/javascript;

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Health check endpoint
        location /health {
            proxy_pass http://go_spatial/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Go Spatial Service Routes
        location ~ ^/api/v1/(spatial|geofences|route|performance) {
            limit_req zone=spatial burst=20 nodelay;
            
            proxy_pass http://go_spatial;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings optimized for spatial queries
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Buffer settings for large responses
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Add performance headers
            add_header X-Service "go-spatial";
            add_header X-Response-Time $upstream_response_time;
        }

        # WebSocket for real-time spatial updates
        location /ws/spatial {
            proxy_pass http://go_spatial;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
        }

        # Node.js API Routes (existing logistics API)
        location ~ ^/api/(drivers|jobs|auth) {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://node_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Standard API timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            add_header X-Service "node-api";
        }

        # Static file serving for documentation
        location /docs {
            alias /usr/share/nginx/html/docs;
            index index.html;
            
            # Cache static files
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # Metrics endpoint (restrict access in production)
        location /metrics {
            proxy_pass http://go_spatial/api/v1/performance/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Restrict access (uncomment in production)
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;
        }

        # Default route - return service information
        location / {
            return 200 '{"service":"LogiTrack API Gateway","version":"1.0.0","endpoints":["/api/v1/spatial","/api/v1/geofences","/api/v1/route","/ws/spatial","/health","/metrics"]}';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 404 /404.json;
        location = /404.json {
            return 404 '{"error":"Not Found","message":"The requested endpoint does not exist"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            return 500 '{"error":"Internal Server Error","message":"Service temporarily unavailable"}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server (uncomment for production with SSL certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /etc/ssl/certs/your-cert.pem;
    #     ssl_certificate_key /etc/ssl/private/your-key.pem;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Same location blocks as HTTP server
    # }
}